{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"webstreaming.py","provenance":[],"mount_file_id":"1hiBbbtbd3pRHx7dTI-odnW7VaBy0f91P","authorship_tag":"ABX9TyMg0Zy70qiRMuZBDd4BN5r/"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"id":"nwBvxud2_BeL","executionInfo":{"status":"ok","timestamp":1626467612123,"user_tz":-180,"elapsed":411,"user":{"displayName":"Haneen Al-hajji ahmed","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Giyr_-T8BFTNeWrcjgCqB3IRTpZy_0xGsJwCygR=s64","userId":"03661492144253303026"}}},"source":["import importlib.machinery\n","\n","modulename = importlib.machinery.SourceFileLoader('singlemotiondetector','/content/drive/MyDrive/Colab Notebooks/stream-video-browser/pyimagesearch/motion_detection/singlemotiondetector.py').load_module()\n","from imutils.video import VideoStream\n","from flask import Response\n","from flask import Flask\n","from flask import render_template\n","import threading\n","import argparse\n","import datetime\n","import imutils\n","import time\n","import cv2"],"execution_count":29,"outputs":[]},{"cell_type":"code","metadata":{"id":"cdzuLi8xB1Ct","executionInfo":{"status":"ok","timestamp":1626467616481,"user_tz":-180,"elapsed":1904,"user":{"displayName":"Haneen Al-hajji ahmed","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Giyr_-T8BFTNeWrcjgCqB3IRTpZy_0xGsJwCygR=s64","userId":"03661492144253303026"}}},"source":["# initialize the output frame and a lock used to ensure thread-safe\n","# exchanges of the output frames (useful when multiple browsers/tabs\n","# are viewing the stream)\n","outputFrame = None\n","lock = threading.Lock()\n","# initialize a flask object\n","app = Flask(__name__)\n","# initialize the video stream and allow the camera sensor to\n","# warmup\n","#vs = VideoStream(usePiCamera=1).start()\n","vs = VideoStream(src=0).start()\n","time.sleep(2.0)"],"execution_count":30,"outputs":[]},{"cell_type":"code","metadata":{"id":"9th0_NPC4kQk","executionInfo":{"status":"ok","timestamp":1626467624207,"user_tz":-180,"elapsed":375,"user":{"displayName":"Haneen Al-hajji ahmed","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Giyr_-T8BFTNeWrcjgCqB3IRTpZy_0xGsJwCygR=s64","userId":"03661492144253303026"}}},"source":["@app.route(\"/ \")\n","def index():\n","\t# return the rendered template\n","\treturn render_template(\"index.html\")"],"execution_count":31,"outputs":[]},{"cell_type":"code","metadata":{"id":"I-ILAw035Dnc","executionInfo":{"status":"ok","timestamp":1626467630682,"user_tz":-180,"elapsed":334,"user":{"displayName":"Haneen Al-hajji ahmed","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Giyr_-T8BFTNeWrcjgCqB3IRTpZy_0xGsJwCygR=s64","userId":"03661492144253303026"}}},"source":["def detect_motion(frameCount):\n","\t# grab global references to the video stream, output frame, and\n","\t# lock variables\n","\tglobal vs, outputFrame, lock\n","\t# initialize the motion detector and the total number of frames\n","\t# read thus far\n","\tmd = SingleMotionDetector(accumWeight=0.1)\n","\ttotal = 0\n","  # loop over frames from the video stream\n","\twhile True:\n","\t\t# read the next frame from the video stream, resize it,\n","\t\t# convert the frame to grayscale, and blur it\n","\t\tframe = vs.read()\n","\t\tframe = imutils.resize(frame, width=400)\n","\t\tgray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)\n","\t\tgray = cv2.GaussianBlur(gray, (7, 7), 0)\n","\t\t# grab the current timestamp and draw it on the frame\n","\t\ttimestamp = datetime.datetime.now()\n","\t\tcv2.putText(frame, timestamp.strftime(\n","\t\t\t\"%A %d %B %Y %I:%M:%S%p\"), (10, frame.shape[0] - 10),\n","\t\t\tcv2.FONT_HERSHEY_SIMPLEX, 0.35, (0, 0, 255), 1)\n","  # if the total number of frames has reached a sufficient\n","\t\t# number to construct a reasonable background model, then\n","\t\t# continue to process the frame\n","\t\tif total > frameCount:\n","\t\t\t# detect motion in the image\n","\t\t\tmotion = md.detect(gray)\n","\t\t\t# check to see if motion was found in the frame\n","\t\t\tif motion is not None:\n","\t\t\t\t# unpack the tuple and draw the box surrounding the\n","\t\t\t\t# \"motion area\" on the output frame\n","\t\t\t\t(thresh, (minX, minY, maxX, maxY)) = motion\n","\t\t\t\tcv2.rectangle(frame, (minX, minY), (maxX, maxY),\n","\t\t\t\t\t(0, 0, 255), 2)\n","\t\t\n","\t\t# update the background model and increment the total number\n","\t\t# of frames read thus far\n","\t\tmd.update(gray)\n","\t\ttotal += 1\n","\t\t# acquire the lock, set the output frame, and release the\n","\t\t# lock\n","\t\twith lock:\n","\t\t\toutputFrame = frame.copy()"],"execution_count":32,"outputs":[]},{"cell_type":"code","metadata":{"id":"xGr15bxS7SeI","executionInfo":{"status":"ok","timestamp":1626467639364,"user_tz":-180,"elapsed":610,"user":{"displayName":"Haneen Al-hajji ahmed","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Giyr_-T8BFTNeWrcjgCqB3IRTpZy_0xGsJwCygR=s64","userId":"03661492144253303026"}}},"source":["def generate():\n","\t# grab global references to the output frame and lock variables\n","\tglobal outputFrame, lock\n","\t# loop over frames from the output stream\n","\twhile True:\n","\t\t# wait until the lock is acquired\n","\t\twith lock:\n","\t\t\t# check if the output frame is available, otherwise skip\n","\t\t\t# the iteration of the loop\n","\t\t\tif outputFrame is None:\n","\t\t\t\tcontinue\n","\t\t\t# encode the frame in JPEG format\n","\t\t\t(flag, encodedImage) = cv2.imencode(\".jpg\", outputFrame)\n","\t\t\t# ensure the frame was successfully encoded\n","\t\t\tif not flag:\n","\t\t\t\tcontinue\n","\t\t# yield the output frame in the byte format\n","\t\tyield(b'--frame\\r\\n' b'Content-Type: image/jpeg\\r\\n\\r\\n' + \n","\t\t\tbytearray(encodedImage) + b'\\r\\n')\n"],"execution_count":33,"outputs":[]},{"cell_type":"code","metadata":{"id":"ZItx_ZAY_CwC","executionInfo":{"status":"ok","timestamp":1626467654724,"user_tz":-180,"elapsed":621,"user":{"displayName":"Haneen Al-hajji ahmed","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Giyr_-T8BFTNeWrcjgCqB3IRTpZy_0xGsJwCygR=s64","userId":"03661492144253303026"}}},"source":["@app.route(\"/video_feed\")\n","def video_feed():\n","\t# return the response generated along with the specific media\n","\t# type (mime type)\n","\treturn Response(generate(),\n","\t\tmimetype = \"multipart/x-mixed-replace; boundary=frame\")"],"execution_count":34,"outputs":[]},{"cell_type":"code","metadata":{"id":"MoiEBLamBuZ8","executionInfo":{"status":"error","timestamp":1626467676025,"user_tz":-180,"elapsed":610,"user":{"displayName":"Haneen Al-hajji ahmed","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Giyr_-T8BFTNeWrcjgCqB3IRTpZy_0xGsJwCygR=s64","userId":"03661492144253303026"}},"outputId":"8632ef6c-b1a2-496b-963a-9d8a1a364e15","colab":{"base_uri":"https://localhost:8080/","height":201}},"source":["# check to see if this is the main thread of execution\n","if __name__ == '__main__':\n","\t# construct the argument parser and parse command line arguments\n","\tap = argparse.ArgumentParser()\n","\tap.add_argument(\"-i\", \"--ip\", type=str, required=True,\n","\t\thelp=\"ip address of the device\")\n","\tap.add_argument(\"-o\", \"--port\", type=int, required=True,\n","\t\thelp=\"ephemeral port number of the server (1024 to 65535)\")\n","\tap.add_argument(\"-f\", \"--frame-count\", type=int, default=32,\n","\t\thelp=\"# of frames used to construct the background model\")\n","\targs = vars(ap.parse_args())\n","\t# start a thread that will perform motion detection\n","\tt = threading.Thread(target=detect_motion, args=(\n","\t\targs[\"frame_count\"],))\n","\tt.daemon = True\n","\tt.start()\n","\t# start the flask app\n","\tapp.run(host=args[\"ip\"], port=args[\"port\"], debug=True,\n","\t\tthreaded=True, use_reloader=False)\n","# release the video stream pointer\n","vs.stop()"],"execution_count":35,"outputs":[{"output_type":"stream","text":["usage: ipykernel_launcher.py [-h] -i IP -o PORT [-f FRAME_COUNT]\n","ipykernel_launcher.py: error: argument -f/--frame-count: invalid int value: '/root/.local/share/jupyter/runtime/kernel-e18d8eaa-b636-4db3-90c2-840c60835ddf.json'\n"],"name":"stderr"},{"output_type":"error","ename":"SystemExit","evalue":"ignored","traceback":["An exception has occurred, use %tb to see the full traceback.\n","\u001b[0;31mSystemExit\u001b[0m\u001b[0;31m:\u001b[0m 2\n"]},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/IPython/core/interactiveshell.py:2890: UserWarning: To exit: use 'exit', 'quit', or Ctrl-D.\n","  warn(\"To exit: use 'exit', 'quit', or Ctrl-D.\", stacklevel=1)\n"],"name":"stderr"}]}]}