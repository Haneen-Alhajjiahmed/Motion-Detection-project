{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"singlemotiondetector.py","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyPye/MIHXFOCit66FWr//cB"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"id":"nLSVE2J31f7f","executionInfo":{"status":"ok","timestamp":1626347062783,"user_tz":-180,"elapsed":314,"user":{"displayName":"Haneen Al-hajji ahmed","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Giyr_-T8BFTNeWrcjgCqB3IRTpZy_0xGsJwCygR=s64","userId":"03661492144253303026"}}},"source":["import numpy as np\n","import imutils\n","import cv2"],"execution_count":2,"outputs":[]},{"cell_type":"code","metadata":{"id":"zhufDNtz1uYT","executionInfo":{"status":"ok","timestamp":1626347128699,"user_tz":-180,"elapsed":340,"user":{"displayName":"Haneen Al-hajji ahmed","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Giyr_-T8BFTNeWrcjgCqB3IRTpZy_0xGsJwCygR=s64","userId":"03661492144253303026"}}},"source":["class SingleMotionDetector:\n","\tdef __init__(self, accumWeight=0.5):\n","\t\t# store the accumulated weight factor\n","\t\tself.accumWeight = accumWeight\n","\t\t# initialize the background model\n","\t\tself.bg = None"],"execution_count":3,"outputs":[]},{"cell_type":"code","metadata":{"id":"_Bf38EgI19mf","executionInfo":{"status":"ok","timestamp":1626347454034,"user_tz":-180,"elapsed":375,"user":{"displayName":"Haneen Al-hajji ahmed","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Giyr_-T8BFTNeWrcjgCqB3IRTpZy_0xGsJwCygR=s64","userId":"03661492144253303026"}}},"source":[" def update(self, image):\n","\t\t# if the background model is None, initialize it\n","\t\tif self.bg is None:\n","\t\t\tself.bg = image.copy().astype(\"float\")\n","\t\t\treturn\n","\t\t# update the background model by accumulating the weighted average\n","\t\tcv2.accumulateWeighted(image, self.bg, self.accumWeight)"],"execution_count":4,"outputs":[]},{"cell_type":"code","metadata":{"id":"pcoqJAUW3MQZ","executionInfo":{"status":"ok","timestamp":1626348475057,"user_tz":-180,"elapsed":445,"user":{"displayName":"Haneen Al-hajji ahmed","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Giyr_-T8BFTNeWrcjgCqB3IRTpZy_0xGsJwCygR=s64","userId":"03661492144253303026"}}},"source":["def detect(self, image, tVal=25):\n","\t\t# compute the absolute difference between the background model and the image passed in, then threshold the delta image\n","\t\tdelta = cv2.absdiff(self.bg.astype(\"uint8\"), image)\n","\t\tthresh = cv2.threshold(delta, tVal, 255, cv2.THRESH_BINARY)[1]\n","\t\t# perform a series of erosions and dilations to remove small blobs\n","\t\tthresh = cv2.erode(thresh, None, iterations=2)\n","\t\tthresh = cv2.dilate(thresh, None, iterations=2)\n","  # find contours in the thresholded image and initialize the\n","\t\t# minimum and maximum bounding box regions for motion\n","\t\tcnts = cv2.findContours(thresh.copy(), cv2.RETR_EXTERNAL,\n","\t\t\tcv2.CHAIN_APPROX_SIMPLE)\n","\t\tcnts = imutils.grab_contours(cnts)\n","\t\t(minX, minY) = (np.inf, np.inf)\n","\t\t(maxX, maxY) = (-np.inf, -np.inf)\n","  # (minX, minY) and (maxX, maxY) performing a boundong box which will tell us the location of where the motion is taking place.\n","  # if no contours were found, return None\n","\t\tif len(cnts) == 0:\n","\t\t\treturn None\n","\t\t# otherwise, loop over the contours\n","\t\tfor c in cnts:\n","\t\t\t# compute the bounding box of the contour and use it to\n","\t\t\t# update the minimum and maximum bounding box regions\n","\t\t\t(x, y, w, h) = cv2.boundingRect(c)\n","\t\t\t(minX, minY) = (min(minX, x), min(minY, y))\n","\t\t\t(maxX, maxY) = (max(maxX, x + w), max(maxY, y + h))\n","\t\t# otherwise, return a tuple of the thresholded image along\n","\t\t# with bounding box\n","\t\treturn (thresh, (minX, minY, maxX, maxY))"],"execution_count":22,"outputs":[]},{"cell_type":"code","metadata":{"id":"vQJTEE6K7GZH"},"source":[""],"execution_count":null,"outputs":[]}]}